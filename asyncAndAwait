By using promise

// console.log(`person1:show ticket`);
// console.log(`person2:show ticket`);
// const wifePromiseToGetTicket=new Promise((resolve, reject) => {
//     console.log(`wife goes to bring back ticket`);
//     resolve(`ticket`);
// })
// const getBurger=wifePromiseToGetTicket.then((t)=>{
//     console.log('Wife comes with the ticket');
//     console.log('wife want some burger');
//     return new Promise((resolve, reject) => {
//         resolve(`${t} and burger`);
//     })
// });
// const getButter=getBurger.then((t)=>{
//     console.log('husband gets the burger for wife');
//     console.log('wife wants some butter');
//     return new Promise((resolve, reject) => {
//         resolve(`${t} and butter`);
//     })
// });
// const getCoke = getButter.then((t)=>{
//     console.log(`husband gets the butter for the wife`);
//     console.log('wife wants the cold drink');
//     return new Promise((resolve, reject) => {
//         resolve(`${t} and cold drink`);
//     })
// });
// getCoke.then(m=>console.log(m));
// console.log(`person4:show ticket`);
// console.log(`person5:show ticket`);


//By using asyn and await

// console.log(`person1:show ticket`);
// console.log(`person2:show ticket`);
// const premovie=async ()=>{
//     const wifePromiseToGetTicket=new Promise((resolve, reject) => {
//         console.log(`wife goes to bring back ticket`);
//         setTimeout(()=>{resolve('ticket')},1000);
//     });
//     const getBurger=new Promise((resolve, reject) =>resolve('burger'));
//     const getButter=new Promise((resolve, reject) =>resolve('butter'));
//     const getColdDrinks=new Promise((resolve, reject) =>resolve('cold drink'));
//     let tic=await wifePromiseToGetTicket;
//     console.log(`Wife comes with the ${tic}`);
//     console.log('wife want some burger');
//     let bur= await getBurger;
//     console.log(`husband gets the ${bur} for wife`);
//     console.log('wife wants some butter');
//     let but= await getButter;
//     console.log(`husband gets the ${but} for wife`);
//     let coldDrink=await getColdDrinks;
//     console.log(`husband gets the ${coldDrink} for wife`);
//     return tic;
// };
// premovie().then(m=>console.log(m)).catch(e=>console.log(e));
// console.log(`person4:show ticket`);
// console.log(`person5:show ticket`);


//By asyn and await using promise.all

// 

//try and catch
// console.log(`person1:show ticket`);
// console.log(`person2:show ticket`);
// const premovie=async ()=>{
//     const wifePromiseToGetTicket=new Promise((resolve, reject) => {
//         console.log(`wife goes to bring back ticket`);
//         setTimeout(()=>{reject('ticket')},1000);
//     });
//     let tic;
//     try {
//         tic=await wifePromiseToGetTicket;
//     } catch (error) {
//         tic='sad face'
//     }
//     return tic;
// };
// premovie().then(m=>console.log(m)).catch(e=>console.log(e));
// console.log(`person4:show ticket`);
// console.log(`person5:show ticket`);



//createPost and delete post by async and await


// let user=[];
// let lastUserActivityTime=new Date();
// const updateTimeCreateAndDeletePost=async (data)=>{

//     const updateLastUserActivityTime=new Promise((resolve, reject) => {
//         setTimeout(() => {
//             lastUserActivityTime=new Date();
//             resolve(lastUserActivityTime);
//         }, 1000);
//     });

//     const createPost = new Promise((resolve,reject)=>{
//         setTimeout(()=>{
//             user.push(data);
//             resolve(user);
//         },1000);
//     });
    
//     function deletePost(){
//         return new Promise((resolve, reject) => {
//             setTimeout(()=>{
//                 let delP=user.pop();
//                 console.log(delP);
//                 resolve();
//             },1000);
//         })
//     };
//     // const deletePost=new Promise((resolve, reject) => {
//     //     setTimeout(()=>{
//     //         let delP=user.pop();
//     //         console.log(delP);
//     //         resolve(user);
//     //     },1000);
//     // });  
    
//     let [userList,lastTime,deletePostTime]=await Promise.all([createPost,updateLastUserActivityTime,deletePost()]);
//     console.log(`After crerating the  post last activity time of the app is = ${lastTime}`);
//     return userList;
// }

// //user1 
// updateTimeCreateAndDeletePost({user1:'Post1 is created'})
// .then((userlist)=>{
//     userlist.forEach(element => {
//         console.log(element);
//     });
// });

// //user2
// updateTimeCreateAndDeletePost({user2:'Post2 is created'})
// .then((userlist)=>{
//     userlist.forEach(element => {
//         console.log(element);
//     });
// });

// //user3
// updateTimeCreateAndDeletePost({user3:'Post3 is created'})
// .then((userlist)=>{
//     userlist.forEach(element => {
//         console.log(element);
//     });
// });
// console.log(`Before Post time =  ${lastUserActivityTime}`);
